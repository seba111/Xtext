/*
* generated by Xtext
*/

package org.xtext.library.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class LibraryGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cCommandsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCommandsCommandParserRuleCall_0 = (RuleCall)cCommandsAssignment.eContents().get(0);
		
		////Parser rules----------
		//
		//Model:
		//
		//	commands+=Command*;
		public ParserRule getRule() { return rule; }

		//commands+=Command*
		public Assignment getCommandsAssignment() { return cCommandsAssignment; }

		//Command
		public RuleCall getCommandsCommandParserRuleCall_0() { return cCommandsCommandParserRuleCall_0; }
	}

	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLendParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAddParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cReturnParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRemoveParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCheckParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSearchParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cShowParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cAddAuthorParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAddUserParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cShowUserAccountParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Command:
		//
		//	Lend | Add | Return | Remove | Check | Search | Show | AddAuthor | AddUser | ShowUserAccount;
		public ParserRule getRule() { return rule; }

		//Lend | Add | Return | Remove | Check | Search | Show | AddAuthor | AddUser | ShowUserAccount
		public Alternatives getAlternatives() { return cAlternatives; }

		//Lend
		public RuleCall getLendParserRuleCall_0() { return cLendParserRuleCall_0; }

		//Add
		public RuleCall getAddParserRuleCall_1() { return cAddParserRuleCall_1; }

		//Return
		public RuleCall getReturnParserRuleCall_2() { return cReturnParserRuleCall_2; }

		//Remove
		public RuleCall getRemoveParserRuleCall_3() { return cRemoveParserRuleCall_3; }

		//Check
		public RuleCall getCheckParserRuleCall_4() { return cCheckParserRuleCall_4; }

		//Search
		public RuleCall getSearchParserRuleCall_5() { return cSearchParserRuleCall_5; }

		//Show
		public RuleCall getShowParserRuleCall_6() { return cShowParserRuleCall_6; }

		//AddAuthor
		public RuleCall getAddAuthorParserRuleCall_7() { return cAddAuthorParserRuleCall_7; }

		//AddUser
		public RuleCall getAddUserParserRuleCall_8() { return cAddUserParserRuleCall_8; }

		//ShowUserAccount
		public RuleCall getShowUserAccountParserRuleCall_9() { return cShowUserAccountParserRuleCall_9; }
	}

	public class SearchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Search");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cByYearParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cByAuthorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Search:
		//
		//	ByYear | ByAuthor;
		public ParserRule getRule() { return rule; }

		//ByYear | ByAuthor
		public Alternatives getAlternatives() { return cAlternatives; }

		//ByYear
		public RuleCall getByYearParserRuleCall_0() { return cByYearParserRuleCall_0; }

		//ByAuthor
		public RuleCall getByAuthorParserRuleCall_1() { return cByAuthorParserRuleCall_1; }
	}

	public class AddAuthorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddAuthor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsbnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIsbnISBNTerminalRuleCall_0_0 = (RuleCall)cIsbnAssignment_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAuthorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAuthorAuthorParserRuleCall_2_0 = (RuleCall)cAuthorAssignment_2.eContents().get(0);
		
		//AddAuthor:
		//
		//	isbn=ISBN "+" author=Author;
		public ParserRule getRule() { return rule; }

		//isbn=ISBN "+" author=Author
		public Group getGroup() { return cGroup; }

		//isbn=ISBN
		public Assignment getIsbnAssignment_0() { return cIsbnAssignment_0; }

		//ISBN
		public RuleCall getIsbnISBNTerminalRuleCall_0_0() { return cIsbnISBNTerminalRuleCall_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1() { return cPlusSignKeyword_1; }

		//author=Author
		public Assignment getAuthorAssignment_2() { return cAuthorAssignment_2; }

		//Author
		public RuleCall getAuthorAuthorParserRuleCall_2_0() { return cAuthorAuthorParserRuleCall_2_0; }
	}

	public class ByYearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ByYear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBookKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cByKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cYearKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYearAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYearYEARTerminalRuleCall_4_0 = (RuleCall)cYearAssignment_4.eContents().get(0);
		
		//ByYear:
		//
		//	"Search" "book" "by" "year" year=YEAR;
		public ParserRule getRule() { return rule; }

		//"Search" "book" "by" "year" year=YEAR
		public Group getGroup() { return cGroup; }

		//"Search"
		public Keyword getSearchKeyword_0() { return cSearchKeyword_0; }

		//"book"
		public Keyword getBookKeyword_1() { return cBookKeyword_1; }

		//"by"
		public Keyword getByKeyword_2() { return cByKeyword_2; }

		//"year"
		public Keyword getYearKeyword_3() { return cYearKeyword_3; }

		//year=YEAR
		public Assignment getYearAssignment_4() { return cYearAssignment_4; }

		//YEAR
		public RuleCall getYearYEARTerminalRuleCall_4_0() { return cYearYEARTerminalRuleCall_4_0; }
	}

	public class ByAuthorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ByAuthor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBookKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cByKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAuthorKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAuthorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAuthorAuthorParserRuleCall_4_0 = (RuleCall)cAuthorAssignment_4.eContents().get(0);
		
		//ByAuthor:
		//
		//	"Search" "book" "by" "author" author=Author;
		public ParserRule getRule() { return rule; }

		//"Search" "book" "by" "author" author=Author
		public Group getGroup() { return cGroup; }

		//"Search"
		public Keyword getSearchKeyword_0() { return cSearchKeyword_0; }

		//"book"
		public Keyword getBookKeyword_1() { return cBookKeyword_1; }

		//"by"
		public Keyword getByKeyword_2() { return cByKeyword_2; }

		//"author"
		public Keyword getAuthorKeyword_3() { return cAuthorKeyword_3; }

		//author=Author
		public Assignment getAuthorAssignment_4() { return cAuthorAssignment_4; }

		//Author
		public RuleCall getAuthorAuthorParserRuleCall_4_0() { return cAuthorAuthorParserRuleCall_4_0; }
	}

	public class LendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBookKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsbnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsbnISBNTerminalRuleCall_2_0 = (RuleCall)cIsbnAssignment_2.eContents().get(0);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFirstnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFirstnameSTRINGTerminalRuleCall_4_0 = (RuleCall)cFirstnameAssignment_4.eContents().get(0);
		private final Assignment cSecondnameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSecondnameSTRINGTerminalRuleCall_5_0 = (RuleCall)cSecondnameAssignment_5.eContents().get(0);
		
		//Lend:
		//
		//	"Lend" "book" isbn=ISBN "to" firstname=STRING secondname=STRING;
		public ParserRule getRule() { return rule; }

		//"Lend" "book" isbn=ISBN "to" firstname=STRING secondname=STRING
		public Group getGroup() { return cGroup; }

		//"Lend"
		public Keyword getLendKeyword_0() { return cLendKeyword_0; }

		//"book"
		public Keyword getBookKeyword_1() { return cBookKeyword_1; }

		//isbn=ISBN
		public Assignment getIsbnAssignment_2() { return cIsbnAssignment_2; }

		//ISBN
		public RuleCall getIsbnISBNTerminalRuleCall_2_0() { return cIsbnISBNTerminalRuleCall_2_0; }

		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }

		//firstname=STRING
		public Assignment getFirstnameAssignment_4() { return cFirstnameAssignment_4; }

		//STRING
		public RuleCall getFirstnameSTRINGTerminalRuleCall_4_0() { return cFirstnameSTRINGTerminalRuleCall_4_0; }

		//secondname=STRING
		public Assignment getSecondnameAssignment_5() { return cSecondnameAssignment_5; }

		//STRING
		public RuleCall getSecondnameSTRINGTerminalRuleCall_5_0() { return cSecondnameSTRINGTerminalRuleCall_5_0; }
	}

	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBookKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsbnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsbnISBNTerminalRuleCall_2_0 = (RuleCall)cIsbnAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTitleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTitleSTRINGTerminalRuleCall_4_0 = (RuleCall)cTitleAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYearAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYearYEARTerminalRuleCall_6_0 = (RuleCall)cYearAssignment_6.eContents().get(0);
		private final Keyword cWrittenKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cByKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAuthorsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAuthorsAuthorParserRuleCall_9_0 = (RuleCall)cAuthorsAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cAutorsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cAutorsAuthorParserRuleCall_10_1_0 = (RuleCall)cAutorsAssignment_10_1.eContents().get(0);
		
		//Add:
		//
		//	"Add" "book" isbn=ISBN "," title=STRING "," year=YEAR "written" "by" authors+=Author ("," autors+=Author)*;
		public ParserRule getRule() { return rule; }

		//"Add" "book" isbn=ISBN "," title=STRING "," year=YEAR "written" "by" authors+=Author ("," autors+=Author)*
		public Group getGroup() { return cGroup; }

		//"Add"
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }

		//"book"
		public Keyword getBookKeyword_1() { return cBookKeyword_1; }

		//isbn=ISBN
		public Assignment getIsbnAssignment_2() { return cIsbnAssignment_2; }

		//ISBN
		public RuleCall getIsbnISBNTerminalRuleCall_2_0() { return cIsbnISBNTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//title=STRING
		public Assignment getTitleAssignment_4() { return cTitleAssignment_4; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_4_0() { return cTitleSTRINGTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//year=YEAR
		public Assignment getYearAssignment_6() { return cYearAssignment_6; }

		//YEAR
		public RuleCall getYearYEARTerminalRuleCall_6_0() { return cYearYEARTerminalRuleCall_6_0; }

		//"written"
		public Keyword getWrittenKeyword_7() { return cWrittenKeyword_7; }

		//"by"
		public Keyword getByKeyword_8() { return cByKeyword_8; }

		//authors+=Author
		public Assignment getAuthorsAssignment_9() { return cAuthorsAssignment_9; }

		//Author
		public RuleCall getAuthorsAuthorParserRuleCall_9_0() { return cAuthorsAuthorParserRuleCall_9_0; }

		//("," autors+=Author)*
		public Group getGroup_10() { return cGroup_10; }

		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }

		//autors+=Author
		public Assignment getAutorsAssignment_10_1() { return cAutorsAssignment_10_1; }

		//Author
		public RuleCall getAutorsAuthorParserRuleCall_10_1_0() { return cAutorsAuthorParserRuleCall_10_1_0; }
	}

	public class AddUserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddUser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUserKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstnameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFirstnameAssignment_2.eContents().get(0);
		private final Assignment cSecondnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSecondnameSTRINGTerminalRuleCall_3_0 = (RuleCall)cSecondnameAssignment_3.eContents().get(0);
		private final Assignment cAgeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAgeYEARTerminalRuleCall_4_0 = (RuleCall)cAgeAssignment_4.eContents().get(0);
		
		//AddUser:
		//
		//	"Add" "user" firstname=STRING secondname=STRING age=YEAR;
		public ParserRule getRule() { return rule; }

		//"Add" "user" firstname=STRING secondname=STRING age=YEAR
		public Group getGroup() { return cGroup; }

		//"Add"
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }

		//"user"
		public Keyword getUserKeyword_1() { return cUserKeyword_1; }

		//firstname=STRING
		public Assignment getFirstnameAssignment_2() { return cFirstnameAssignment_2; }

		//STRING
		public RuleCall getFirstnameSTRINGTerminalRuleCall_2_0() { return cFirstnameSTRINGTerminalRuleCall_2_0; }

		//secondname=STRING
		public Assignment getSecondnameAssignment_3() { return cSecondnameAssignment_3; }

		//STRING
		public RuleCall getSecondnameSTRINGTerminalRuleCall_3_0() { return cSecondnameSTRINGTerminalRuleCall_3_0; }

		//age=YEAR
		public Assignment getAgeAssignment_4() { return cAgeAssignment_4; }

		//YEAR
		public RuleCall getAgeYEARTerminalRuleCall_4_0() { return cAgeYEARTerminalRuleCall_4_0; }
	}

	public class RemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Remove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBookKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsbnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsbnISBNTerminalRuleCall_2_0 = (RuleCall)cIsbnAssignment_2.eContents().get(0);
		
		//Remove:
		//
		//	"Remove" "book" isbn=ISBN;
		public ParserRule getRule() { return rule; }

		//"Remove" "book" isbn=ISBN
		public Group getGroup() { return cGroup; }

		//"Remove"
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }

		//"book"
		public Keyword getBookKeyword_1() { return cBookKeyword_1; }

		//isbn=ISBN
		public Assignment getIsbnAssignment_2() { return cIsbnAssignment_2; }

		//ISBN
		public RuleCall getIsbnISBNTerminalRuleCall_2_0() { return cIsbnISBNTerminalRuleCall_2_0; }
	}

	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBookKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsbnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsbnISBNTerminalRuleCall_2_0 = (RuleCall)cIsbnAssignment_2.eContents().get(0);
		private final Keyword cFromKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFirstnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFirstnameSTRINGTerminalRuleCall_4_0 = (RuleCall)cFirstnameAssignment_4.eContents().get(0);
		private final Assignment cSecondnameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSecondnameSTRINGTerminalRuleCall_5_0 = (RuleCall)cSecondnameAssignment_5.eContents().get(0);
		
		//Return:
		//
		//	"Return" "book" isbn=ISBN "from" firstname=STRING secondname=STRING;
		public ParserRule getRule() { return rule; }

		//"Return" "book" isbn=ISBN "from" firstname=STRING secondname=STRING
		public Group getGroup() { return cGroup; }

		//"Return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//"book"
		public Keyword getBookKeyword_1() { return cBookKeyword_1; }

		//isbn=ISBN
		public Assignment getIsbnAssignment_2() { return cIsbnAssignment_2; }

		//ISBN
		public RuleCall getIsbnISBNTerminalRuleCall_2_0() { return cIsbnISBNTerminalRuleCall_2_0; }

		//"from"
		public Keyword getFromKeyword_3() { return cFromKeyword_3; }

		//firstname=STRING
		public Assignment getFirstnameAssignment_4() { return cFirstnameAssignment_4; }

		//STRING
		public RuleCall getFirstnameSTRINGTerminalRuleCall_4_0() { return cFirstnameSTRINGTerminalRuleCall_4_0; }

		//secondname=STRING
		public Assignment getSecondnameAssignment_5() { return cSecondnameAssignment_5; }

		//STRING
		public RuleCall getSecondnameSTRINGTerminalRuleCall_5_0() { return cSecondnameSTRINGTerminalRuleCall_5_0; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBookKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStatusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIsbnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIsbnISBNTerminalRuleCall_3_0 = (RuleCall)cIsbnAssignment_3.eContents().get(0);
		
		//Check:
		//
		//	"Check" "book" "status" isbn=ISBN;
		public ParserRule getRule() { return rule; }

		//"Check" "book" "status" isbn=ISBN
		public Group getGroup() { return cGroup; }

		//"Check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//"book"
		public Keyword getBookKeyword_1() { return cBookKeyword_1; }

		//"status"
		public Keyword getStatusKeyword_2() { return cStatusKeyword_2; }

		//isbn=ISBN
		public Assignment getIsbnAssignment_3() { return cIsbnAssignment_3; }

		//ISBN
		public RuleCall getIsbnISBNTerminalRuleCall_3_0() { return cIsbnISBNTerminalRuleCall_3_0; }
	}

	public class AuthorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Author");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstnameSTRINGTerminalRuleCall_0_0 = (RuleCall)cFirstnameAssignment_0.eContents().get(0);
		private final Assignment cSecondnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSecondnameSTRINGTerminalRuleCall_1_0 = (RuleCall)cSecondnameAssignment_1.eContents().get(0);
		
		//Author:
		//
		//	firstname=STRING secondname=STRING;
		public ParserRule getRule() { return rule; }

		//firstname=STRING secondname=STRING
		public Group getGroup() { return cGroup; }

		//firstname=STRING
		public Assignment getFirstnameAssignment_0() { return cFirstnameAssignment_0; }

		//STRING
		public RuleCall getFirstnameSTRINGTerminalRuleCall_0_0() { return cFirstnameSTRINGTerminalRuleCall_0_0; }

		//secondname=STRING
		public Assignment getSecondnameAssignment_1() { return cSecondnameAssignment_1; }

		//STRING
		public RuleCall getSecondnameSTRINGTerminalRuleCall_1_0() { return cSecondnameSTRINGTerminalRuleCall_1_0; }
	}

	public class ShowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Show");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWhatAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWhatWHATTerminalRuleCall_2_0 = (RuleCall)cWhatAssignment_2.eContents().get(0);
		
		//Show:
		//
		//	"Show" "all" what=WHAT;
		public ParserRule getRule() { return rule; }

		//"Show" "all" what=WHAT
		public Group getGroup() { return cGroup; }

		//"Show"
		public Keyword getShowKeyword_0() { return cShowKeyword_0; }

		//"all"
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }

		//what=WHAT
		public Assignment getWhatAssignment_2() { return cWhatAssignment_2; }

		//WHAT
		public RuleCall getWhatWHATTerminalRuleCall_2_0() { return cWhatWHATTerminalRuleCall_2_0; }
	}

	public class ShowUserAccountElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ShowUserAccount");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUserKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAccountKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFirstnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFirstnameSTRINGTerminalRuleCall_3_0 = (RuleCall)cFirstnameAssignment_3.eContents().get(0);
		private final Assignment cSecondnameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSecondnameSTRINGTerminalRuleCall_4_0 = (RuleCall)cSecondnameAssignment_4.eContents().get(0);
		
		//ShowUserAccount:
		//
		//	"Show" "user" "account" firstname=STRING secondname=STRING;
		public ParserRule getRule() { return rule; }

		//"Show" "user" "account" firstname=STRING secondname=STRING
		public Group getGroup() { return cGroup; }

		//"Show"
		public Keyword getShowKeyword_0() { return cShowKeyword_0; }

		//"user"
		public Keyword getUserKeyword_1() { return cUserKeyword_1; }

		//"account"
		public Keyword getAccountKeyword_2() { return cAccountKeyword_2; }

		//firstname=STRING
		public Assignment getFirstnameAssignment_3() { return cFirstnameAssignment_3; }

		//STRING
		public RuleCall getFirstnameSTRINGTerminalRuleCall_3_0() { return cFirstnameSTRINGTerminalRuleCall_3_0; }

		//secondname=STRING
		public Assignment getSecondnameAssignment_4() { return cSecondnameAssignment_4; }

		//STRING
		public RuleCall getSecondnameSTRINGTerminalRuleCall_4_0() { return cSecondnameSTRINGTerminalRuleCall_4_0; }
	}
	
	
	private ModelElements pModel;
	private CommandElements pCommand;
	private SearchElements pSearch;
	private AddAuthorElements pAddAuthor;
	private ByYearElements pByYear;
	private ByAuthorElements pByAuthor;
	private LendElements pLend;
	private AddElements pAdd;
	private AddUserElements pAddUser;
	private RemoveElements pRemove;
	private ReturnElements pReturn;
	private CheckElements pCheck;
	private AuthorElements pAuthor;
	private ShowElements pShow;
	private ShowUserAccountElements pShowUserAccount;
	private TerminalRule tYEAR;
	private TerminalRule tISBN;
	private TerminalRule tWHAT;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public LibraryGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.library.Library".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	////Parser rules----------
	//
	//Model:
	//
	//	commands+=Command*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Command:
	//
	//	Lend | Add | Return | Remove | Check | Search | Show | AddAuthor | AddUser | ShowUserAccount;
	public CommandElements getCommandAccess() {
		return (pCommand != null) ? pCommand : (pCommand = new CommandElements());
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}

	//Search:
	//
	//	ByYear | ByAuthor;
	public SearchElements getSearchAccess() {
		return (pSearch != null) ? pSearch : (pSearch = new SearchElements());
	}
	
	public ParserRule getSearchRule() {
		return getSearchAccess().getRule();
	}

	//AddAuthor:
	//
	//	isbn=ISBN "+" author=Author;
	public AddAuthorElements getAddAuthorAccess() {
		return (pAddAuthor != null) ? pAddAuthor : (pAddAuthor = new AddAuthorElements());
	}
	
	public ParserRule getAddAuthorRule() {
		return getAddAuthorAccess().getRule();
	}

	//ByYear:
	//
	//	"Search" "book" "by" "year" year=YEAR;
	public ByYearElements getByYearAccess() {
		return (pByYear != null) ? pByYear : (pByYear = new ByYearElements());
	}
	
	public ParserRule getByYearRule() {
		return getByYearAccess().getRule();
	}

	//ByAuthor:
	//
	//	"Search" "book" "by" "author" author=Author;
	public ByAuthorElements getByAuthorAccess() {
		return (pByAuthor != null) ? pByAuthor : (pByAuthor = new ByAuthorElements());
	}
	
	public ParserRule getByAuthorRule() {
		return getByAuthorAccess().getRule();
	}

	//Lend:
	//
	//	"Lend" "book" isbn=ISBN "to" firstname=STRING secondname=STRING;
	public LendElements getLendAccess() {
		return (pLend != null) ? pLend : (pLend = new LendElements());
	}
	
	public ParserRule getLendRule() {
		return getLendAccess().getRule();
	}

	//Add:
	//
	//	"Add" "book" isbn=ISBN "," title=STRING "," year=YEAR "written" "by" authors+=Author ("," autors+=Author)*;
	public AddElements getAddAccess() {
		return (pAdd != null) ? pAdd : (pAdd = new AddElements());
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}

	//AddUser:
	//
	//	"Add" "user" firstname=STRING secondname=STRING age=YEAR;
	public AddUserElements getAddUserAccess() {
		return (pAddUser != null) ? pAddUser : (pAddUser = new AddUserElements());
	}
	
	public ParserRule getAddUserRule() {
		return getAddUserAccess().getRule();
	}

	//Remove:
	//
	//	"Remove" "book" isbn=ISBN;
	public RemoveElements getRemoveAccess() {
		return (pRemove != null) ? pRemove : (pRemove = new RemoveElements());
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}

	//Return:
	//
	//	"Return" "book" isbn=ISBN "from" firstname=STRING secondname=STRING;
	public ReturnElements getReturnAccess() {
		return (pReturn != null) ? pReturn : (pReturn = new ReturnElements());
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}

	//Check:
	//
	//	"Check" "book" "status" isbn=ISBN;
	public CheckElements getCheckAccess() {
		return (pCheck != null) ? pCheck : (pCheck = new CheckElements());
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//Author:
	//
	//	firstname=STRING secondname=STRING;
	public AuthorElements getAuthorAccess() {
		return (pAuthor != null) ? pAuthor : (pAuthor = new AuthorElements());
	}
	
	public ParserRule getAuthorRule() {
		return getAuthorAccess().getRule();
	}

	//Show:
	//
	//	"Show" "all" what=WHAT;
	public ShowElements getShowAccess() {
		return (pShow != null) ? pShow : (pShow = new ShowElements());
	}
	
	public ParserRule getShowRule() {
		return getShowAccess().getRule();
	}

	//ShowUserAccount:
	//
	//	"Show" "user" "account" firstname=STRING secondname=STRING;
	public ShowUserAccountElements getShowUserAccountAccess() {
		return (pShowUserAccount != null) ? pShowUserAccount : (pShowUserAccount = new ShowUserAccountElements());
	}
	
	public ParserRule getShowUserAccountRule() {
		return getShowUserAccountAccess().getRule();
	}

	////Terminal rules---------
	//
	//terminal YEAR:
	//
	//	("1" | "2") "0".."9" "0".."9" "0".."9";
	public TerminalRule getYEARRule() {
		return (tYEAR != null) ? tYEAR : (tYEAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "YEAR"));
	} 

	////ISBN 9780-12-345678-9
	//
	//terminal ISBN:
	//
	//	("0".."9"+ "-")* "0".."9"+;
	public TerminalRule getISBNRule() {
		return (tISBN != null) ? tISBN : (tISBN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ISBN"));
	} 

	//terminal WHAT:
	//
	//	"authors" | "books";
	public TerminalRule getWHATRule() {
		return (tWHAT != null) ? tWHAT : (tWHAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHAT"));
	} 

	//XExpression:
	//
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression |
	//
	//	XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression |
	//
	//	XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//
	//
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//
	//
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	// StaticQualifier:
	//
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
